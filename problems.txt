этот текст я написал с целью того, что я не разбираюсь в вопросе должным образом
и хочу записать свой ход мысли, чтобы в случае чего что-то не забыть Да и читающий
может дать свой отзыв и совет

- я столкнулся с такой проблемой, что у меня в огромном количестве
классов ProductDao используют HashMapProductDao, но а вдруг я хочу поменять его всё же обратно на ArrayListProductDao?
и у меня такая проблема получилась при появлении ещё парочки Singletone-ов

я думаю это популярная проблема и неё давно придумали кучу решений и разработали отдельнй общий Паттерн
какие у меня были идеи
- сделать отдельный класс, в который запихнуть конкретный ProductDao и прочие сервисы и его передать
а при желании изменить реализацию -- просто помеять класс внутри этого Класса. вроде как это Абстрактная фабрика
- у меня в классах (PLP,PDP) есть Зависимости, в которые нужно Внести конкретный объект. и в нашем случае Уже созданный
вроде как это DI

тут я заметил схожесть между DI и Abstract Fabric
и выяснилось, что -- тк я хочу вставить в Клиентов(Сервлеты в моём случае) уже созданные объекты, а не давать
методы для создния полностью новых, то это DI

т.о. мой выбор пал на DI
как его реализовать?

по сути, тут отлично ложится Spring, но курс как бы не подрузумевает его использование, поэтому я решил отказаться от этой идеи
какая у меня вообще ситуация:
- у меня есть Servlet-ы, которые грузятся лениво И их жизнь управляется контейнером Сервлетов
- определиться с реализацией ProductDao мне нужно на самом начале работы программы

и тут я вспомнил про ServletContext, который как бы представляет собой всё веб-приложение
и в нём можно хранить наши зависимости
и тут я ещё вспомнил, что в самом начале запуска программы, у нас   вызываются ServletContextListener-ы
и я могу создать свой новый Listener, в ответсвенности которого будет задания связей

в терминах DI моя структура имеет вид:

Injector  – ServletContextListener
Dependency  – ProductDao, сервисы
Client – Servlet-ы
Service – реализация Dependency <=> реализация Dao
Injection Method - context.getAttribute.

но есть ещё проблема -- как передавать ProductDao в Service-ы?
варианты:
- отказатся от Singleton в Сервисах и просто передать как параметр конструктора
создать объект в Listener-е и возвращать его и не давать возможность Клиенту менять Dao
- передавать в getInstance -- да в принципе тоже самое и сути дела не поменяет для Клиента
- внедрять через контекст -- сильнее зависимость от ServletAPI + по сути в нашей ситуации не сильнее чем первый вариант не отличается
- Фабрики

тк явного указания, чтобы Service-ы были Singleton, я откажусь от их Одиночества (он им не так сильно нужен, как для Dao)
будет public Service(Dao dao)

насколько ктичино, что пользователь может создать new Service, вместо того чтобы context.getAttribute(Service)?
я хочу, чтобы у пользователя не было этой возможности
и для этого я вспомнил, что есть возможность :
- сделать Interface для Service (CartService, например), который будет доступен пользователю
- реализовать ServletContextListener и ConcreteService в одном пакете
- контруктор, который внедряет зависимость в ConcreteService, сделать доступным внутри пакета
- в реализации SCL new ConcreteService(закинуть зависимость)

теперь вопрос, а как по пакетам разложить?
    нужно ли вообще пользователю иметь доступ к ConcreteService?
    я думаю нет
    но я пока временно "закостылил". вроде есть что-то для более точного управления в Java 9

но появилась новая проблема:
    у меня два SCListener-а, и мне как бы важна последовательность
    мне кажется это пример плохой зависимости, от которой стоит избавиться
    А избавиться от неё можно сделав из одного класса просто класс инициализации данных
    но не кладётся ли на DSCL две ответвенности?
        если говорить, что это "просто часть инициализации системы" , то нет
        если дробить ещё сильнее, то да, но -- помоему так можно дробить до бесконечности

но теперь у меня зависимость от конкретной реализации DataInitializer,
но я думаю на данный момент это пока терпимо
